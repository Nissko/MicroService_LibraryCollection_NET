// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentingOutBooksService.Infrastructure;

#nullable disable

namespace RentingOutBooksService.Infrastructure.Persistence.Providers.Migrations.RentMicroServiceContextv0._0._1
{
    [DbContext(typeof(RentMicroServiceContext))]
    partial class RentMicroServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("LIBRARY_RENT_BOOKS")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentingOutBooksService.Domain.Aggregates.RentAggregate.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("_bookId")
                        .HasColumnType("uuid")
                        .HasColumnName("BookId");

                    b.Property<Guid>("_clientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ClientId");

                    b.Property<int>("_countRentDay")
                        .HasColumnType("integer")
                        .HasColumnName("CountRentDay");

                    b.Property<DateTime>("_rentDateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RentEndDate");

                    b.Property<DateTime>("_rentDateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RentStartDate");

                    b.Property<Guid>("_rentStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("RentStatusId");

                    b.HasKey("Id");

                    b.HasIndex("_clientId");

                    b.HasIndex("_rentStatusId");

                    b.ToTable("Rents", "LIBRARY_RENT_BOOKS");
                });

            modelBuilder.Entity("RentingOutBooksService.Domain.Aggregates.RentAggregate.RentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("RentStatuses", "LIBRARY_RENT_BOOKS");
                });

            modelBuilder.Entity("RentingOutBooksService.Domain.Aggregates.RentAggregate.Tenantry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Address");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FullName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("_patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Patronymic");

                    b.Property<string>("_surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.ToTable("Tenantries", "LIBRARY_RENT_BOOKS");
                });

            modelBuilder.Entity("RentingOutBooksService.Domain.Aggregates.RentAggregate.Rent", b =>
                {
                    b.HasOne("RentingOutBooksService.Domain.Aggregates.RentAggregate.Tenantry", null)
                        .WithMany()
                        .HasForeignKey("_clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentingOutBooksService.Domain.Aggregates.RentAggregate.RentStatus", "RentStatus")
                        .WithMany()
                        .HasForeignKey("_rentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
