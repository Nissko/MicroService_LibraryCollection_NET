// <auto-generated />
using System;
using LibraryCollection.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryCollection.Infrastructure.Persistence.Providers.Migrations.BookPostgresqlDbContextv0._0._1
{
    [DbContext(typeof(BooksContext))]
    [Migration("20240126043902_0.0.1")]
    partial class _001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("_ageRestrict")
                        .HasColumnType("integer")
                        .HasColumnName("AgeRestrict");

                    b.Property<Guid>("_categoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<decimal?>("_discount")
                        .HasColumnType("numeric")
                        .HasColumnName("Discount");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("_numberOfPage")
                        .HasColumnType("integer")
                        .HasColumnName("NumberOfPage");

                    b.Property<decimal>("_price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<DateTime>("_releaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReleaseDate");

                    b.Property<Guid>("_statusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("_categoryId");

                    b.HasIndex("_statusId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("BookCategories", (string)null);
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("_nameGenre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NameGenre");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookGenres", (string)null);
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("_nameQuote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NameQuote");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookQuotes", (string)null);
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("BooksStatuses", (string)null);
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.Book", b =>
                {
                    b.HasOne("LibraryCollection.Domain.Aggregates.BookAggregate.BookCategory", "Category")
                        .WithMany()
                        .HasForeignKey("_categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryCollection.Domain.Aggregates.BookAggregate.BookStatus", "Status")
                        .WithMany()
                        .HasForeignKey("_statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookGenre", b =>
                {
                    b.HasOne("LibraryCollection.Domain.Aggregates.BookAggregate.Book", null)
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.BookQuote", b =>
                {
                    b.HasOne("LibraryCollection.Domain.Aggregates.BookAggregate.Book", null)
                        .WithMany("Quotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCollection.Domain.Aggregates.BookAggregate.Book", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Quotes");
                });
#pragma warning restore 612, 618
        }
    }
}
